import axios, { AxiosError } from 'axios';
import { logError, logInfo } from '../../environnements/environnement';

// Temporairement, l'URL est d√©finie ici. Id√©alement, elle proviendrait du fichier d'environnement.
const API_URL = 'http://localhost:8000/api/modeles';

// Fonction pour v√©rifier si le token est valide
const checkTokenValidity = () => {
  const token = localStorage.getItem('auth_token');
  const user = localStorage.getItem('taaru_user');
  
  console.log('üîç V√©rification du token:', {
    tokenExists: !!token,
    userExists: !!user,
    tokenLength: token ? token.length : 0,
    tokenPreview: token ? `${token.substring(0, 20)}...` : 'Aucun token'
  });
  
  if (!token) {
    console.error('‚ùå Token d\'authentification non trouv√© dans localStorage');
    throw new Error('Token d\'authentification non trouv√©. Veuillez vous reconnecter.');
  }
  
  if (!user) {
    console.error('‚ùå Informations utilisateur non trouv√©es dans localStorage');
    throw new Error('Informations utilisateur non trouv√©es. Veuillez vous reconnecter.');
  }
  
  console.log('‚úÖ Token valide trouv√©');
  return token;
};

// Configuration Axios avec le token d'authentification
const getAxiosConfig = () => {
  const token = checkTokenValidity();
  
  const config = {
    headers: {
      'Content-Type': 'multipart/form-data',
      'Authorization': `Bearer ${token}`,
    },
  };
  
  console.log('Configuration modeleService avec headers:', config.headers);
  return config;
};

// Configuration pour les requ√™tes JSON (GET, PUT, DELETE)
const getJsonConfig = () => {
  const token = checkTokenValidity();

  return {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    },
  };
};

export interface Modele {
  id: number;
  user_id: number;
  nom: string;
  slug: string;
  description: string;
  type: 'homme' | 'femme' | 'enfant' | 'mixte';
  prix?: number;
  tags?: string[];
  materiaux?: string[];
  photos?: string[];
  videos?: string[];
  statut: 'actif' | 'inactif' | 'en_revision';
  created_at: string;
  updated_at: string;
  user?: {
    id: number;
    name: string;
    email: string;
    nom_atelier?: string;
  };
}

export interface ModeleListResponse {
  success: boolean;
  message: string;
  data: Modele[];
  pagination: {
    current_page: number;
    last_page: number;
    per_page: number;
    total: number;
    from: number;
    to: number;
  };
}

export interface ModeleResponse {
  success: boolean;
  message: string;
  data: Modele;
}

/**
 * R√©cup√®re la liste des mod√®les avec pagination et filtres
 * Utilise la version publique par d√©faut, mais peut utiliser l'authentification si disponible
 */
export async function getModeles(params?: {
  search?: string;
  type?: string;
  statut?: string;
  sort_by?: string;
  sort_order?: 'asc' | 'desc';
  per_page?: number;
  page?: number;
  useAuth?: boolean; // Option pour forcer l'utilisation de l'authentification
}): Promise<ModeleListResponse> {
  try {
    const useAuth = params?.useAuth || false;
    const requestParams = params ? { ...params } : {};
    delete requestParams.useAuth;
    
    logInfo('üöÄ R√©cup√©ration de la liste des mod√®les', { ...requestParams, useAuth });
    
    // V√©rifier si on doit utiliser l'authentification
    if (useAuth) {
      const config = getJsonConfig();
      console.log('üì§ Configuration de la requ√™te (avec auth):', {
        url: API_URL,
        headers: config.headers,
        params: requestParams
      });
      
      const response = await axios.get(API_URL, {
        ...config,
        params: requestParams
      });
      
      logInfo('‚úÖ Liste des mod√®les r√©cup√©r√©e (avec auth)', { count: response.data.data?.length });
      return response.data;
    } else {
      // Version publique
      const response = await axios.get(API_URL, {
        headers: {
          'Content-Type': 'application/json',
        },
        params: requestParams
      });
      
      logInfo('‚úÖ Liste publique des mod√®les r√©cup√©r√©e', { count: response.data.data?.length });
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e lors de la r√©cup√©ration des mod√®les:', {
      error: error,
      status: (error as AxiosError)?.response?.status,
      statusText: (error as AxiosError)?.response?.statusText,
      data: (error as AxiosError)?.response?.data,
      headers: (error as AxiosError)?.response?.headers
    });
    logError(error, 'Erreur lors de la r√©cup√©ration des mod√®les');
    throw error;
  }
}

/**
 * R√©cup√®re un mod√®le sp√©cifique par ID
 * Utilise la version publique par d√©faut, mais peut utiliser l'authentification si disponible
 */
export async function getModele(id: string, useAuth: boolean = false): Promise<ModeleResponse> {
  try {
    logInfo('R√©cup√©ration du mod√®le', { id, useAuth });
    
    if (useAuth) {
      const response = await axios.get(`${API_URL}/${id}`, getJsonConfig());
      logInfo('Mod√®le r√©cup√©r√© (avec auth)', { id });
      return response.data;
    } else {
      const response = await axios.get(`${API_URL}/${id}`, {
        headers: {
          'Content-Type': 'application/json',
        }
      });
      logInfo('Mod√®le public r√©cup√©r√©', { id });
      return response.data;
    }
  } catch (error) {
    logError(error, 'Erreur lors de la r√©cup√©ration du mod√®le');
    throw error;
  }
}

/**
 * Cr√©e un nouveau mod√®le en envoyant les donn√©es du formulaire √† l'API.
 * @param formData - Le FormData contenant les informations du mod√®le et les fichiers.
 * @returns La r√©ponse de l'API.
 */
export async function createModele(formData: FormData) {
  try {
    logInfo('üöÄ Tentative de cr√©ation d\'un nouveau mod√®le');
    
    // V√©rifier le token avant l'envoi
    const token = localStorage.getItem('auth_token');
    const user = localStorage.getItem('taaru_user');
    
    console.log('üîç V√©rification du token pour cr√©ation:', {
      tokenExists: !!token,
      userExists: !!user,
      tokenLength: token ? token.length : 0,
      tokenPreview: token ? `${token.substring(0, 20)}...` : 'Aucun token',
      userData: user ? JSON.parse(user) : null
    });
    
    if (!token) {
      throw new Error('Token d\'authentification non trouv√©. Veuillez vous reconnecter.');
    }
    
    // Configuration avec authentification
    const config = getAxiosConfig();
    console.log('üì§ Configuration pour cr√©ation:', {
      url: API_URL,
      headers: config.headers,
      hasAuthorization: !!config.headers.Authorization,
      authorizationPreview: config.headers.Authorization ? `${config.headers.Authorization.substring(0, 30)}...` : 'Aucune'
    });
    
    // V√©rifier que le serveur est accessible
    const response = await axios.post(API_URL, formData, {
      ...config,
      timeout: 30000, // 30 secondes de timeout
      validateStatus: (status) => {
        return status >= 200 && status < 300; // Accepter seulement les statuts 2xx
      }
    });
    
    logInfo('‚úÖ Mod√®le cr√©√© avec succ√®s', { modeleId: response.data.data.id });
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e lors de la cr√©ation du mod√®le:', {
      error: error,
      status: (error as AxiosError)?.response?.status,
      statusText: (error as AxiosError)?.response?.statusText,
      data: (error as AxiosError)?.response?.data,
      headers: (error as AxiosError)?.response?.headers,
      requestHeaders: (error as AxiosError)?.config?.headers
    });
    
    if (axios.isAxiosError(error)) {
      if (error.code === 'ERR_NETWORK') {
        logError(error, 'Erreur de r√©seau - V√©rifiez que le serveur backend est d√©marr√© sur http://localhost:8000');
        throw new Error('Erreur de connexion au serveur. V√©rifiez que le serveur backend est d√©marr√©.');
      } else if (error.response?.status === 401) {
        logError(error, 'Erreur d\'authentification - Token invalide ou expir√©');
        throw new Error('Erreur d\'authentification. Veuillez vous reconnecter.');
      } else if (error.response?.status === 0) {
        logError(error, 'Erreur CORS - Le serveur ne r√©pond pas aux requ√™tes cross-origin');
        throw new Error('Erreur CORS. V√©rifiez la configuration du serveur backend.');
      } else {
        logError(error, 'Erreur lors de la cr√©ation du mod√®le');
        throw error;
      }
    } else {
      logError(error, 'Erreur inattendue lors de la cr√©ation du mod√®le');
      throw error;
    }
  }
}

/**
 * R√©cup√®re la liste des mod√®les avec pagination et filtres (version publique)
 */
export async function getModelesPublic(params?: {
  search?: string;
  type?: string;
  statut?: string;
  sort_by?: string;
  sort_order?: 'asc' | 'desc';
  per_page?: number;
  page?: number;
}): Promise<ModeleListResponse> {
  try {
    logInfo('üöÄ R√©cup√©ration publique de la liste des mod√®les', params);
    
    const response = await axios.get(API_URL, {
      headers: {
        'Content-Type': 'application/json',
      },
      params
    });
    
    logInfo('‚úÖ Liste publique des mod√®les r√©cup√©r√©e', { count: response.data.data?.length });
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e lors de la r√©cup√©ration publique des mod√®les:', {
      error: error,
      status: (error as AxiosError)?.response?.status,
      statusText: (error as AxiosError)?.response?.statusText,
      data: (error as AxiosError)?.response?.data,
      headers: (error as AxiosError)?.response?.headers
    });
    logError(error, 'Erreur lors de la r√©cup√©ration publique des mod√®les');
    throw error;
  }
}

/**
 * R√©cup√®re un mod√®le sp√©cifique par ID (version publique)
 */
export async function getModelePublic(id: string): Promise<ModeleResponse> {
  try {
    logInfo('R√©cup√©ration publique du mod√®le', { id });
    const response = await axios.get(`${API_URL}/${id}`, {
      headers: {
        'Content-Type': 'application/json',
      }
    });
    logInfo('Mod√®le public r√©cup√©r√©', { id });
    return response.data;
  } catch (error) {
    logError(error, 'Erreur lors de la r√©cup√©ration publique du mod√®le');
    throw error;
  }
} 